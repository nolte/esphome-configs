# include the base config like wifi and logging
<<: !include ../include-base.yaml.snipped

# https://github.com/BOlaerts/ESP32-2432s028/tree/main/ESPHome


substitutions:
  name: poc-esp32-2432s028
  id: poc_esp32_2432s028
  friendly_name: ${name} Display

esphome:
  name: ${name}

esp32:
  board: esp32dev
  framework:
    type: arduino

spi:
  - id: lcd
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
i2c:
  sda: GPIO27
  scl: GPIO22
  scan: true
  id: bus_a

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_teal
    red: 0%
    green: 100%
    blue: 100%
  - id: my_gray
    red: 70%
    green: 70%
    blue: 70%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%

time:
  - platform: homeassistant
    id: esptime

font:
  - file: "../fonts/Helvetica.ttf"
    id: helvetica_48
    size: 48
  - file: "../fonts/Helvetica.ttf"
    id: helvetica_36
    size: 36
  - file: "../fonts/Helvetica.ttf"
    id: helvetica_24
    size: 24
  - file: "../fonts/Helvetica.ttf"
    id: helvetica_18
    size: 18
  - file: "../fonts/Helvetica.ttf"
    id: helvetica_12
    size: 12


sensor:
  - platform: homeassistant
    id: absolute_luftfeuchtigkeit_unterschied
    entity_id: sensor.absolute_luftfeuchtigkeit_unterschied
  - platform: homeassistant
    id: absolute_luftfeuchtigkeit_unterschied_badezimmer
    entity_id: sensor.absolute_luftfeuchtigkeit_unterschied_badezimmer
  - platform: homeassistant
    id: absolute_luftfeuchtigkeit_unterschied_floor
    entity_id: sensor.absolute_luftfeuchtigkeit_unterschied_floor

  - platform: homeassistant
    id: absolute_luftfeuchtigkeit_unterschied_kitchen
    entity_id: sensor.absolute_luftfeuchtigkeit_unterschied_kitchen

  - platform: homeassistant
    id: absolute_luftfeuchtigkeit_unterschied_sleepingroom
    entity_id: sensor.absolute_luftfeuchtigkeit_unterschied_sleepingroom

  - platform: homeassistant
    id: absolute_luftfeuchtigkeit_unterschied_wohnzimmer
    entity_id: sensor.absolute_luftfeuchtigkeit_unterschied_wohnzimmer




binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status

display:
  - platform: ili9xxx
    model: ILI9341
    spi_id: lcd
    cs_pin: 15
    dc_pin: 2
    # update_interval: 10s
    lambda: |-
      int hs = it.get_width() / 2; // Horizontal Spacing = text data horizontal center point
      int hq = it.get_width() / 4; // text data horizontal center for two vertical lines
      int vs = it.get_height() / 8; // Vertical Center = text data vertical center point = how many lines
      int line_gap = 21; // distance of line from center of data text
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
      it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));
      
      it.strftime(5, 5, id(helvetica_12), id(my_white), TextAlign::TOP_LEFT, "%H:%M:%S", id(esptime).now());
      it.print(hs, 5, id(helvetica_12), id(my_blue), TextAlign::TOP_CENTER, "${name}"); //print title  
      
      if (id(system_status).state) {
        it.print(it.get_width()-5, 5, id(helvetica_12), id(my_green), TextAlign::TOP_RIGHT, "Online");
      }
      else {
        it.print(it.get_width()-5, 5, id(helvetica_12), id(my_red), TextAlign::TOP_RIGHT, "Offline");
      }

      it.print(2*hq, vs * 1, id(helvetica_24), id(my_white), TextAlign::CENTER, "Luftfeu. Diff");

      it.print(hq, vs * 2, id(helvetica_18), id(my_white), TextAlign::CENTER, "Wohnzimmer:");
      if (id(absolute_luftfeuchtigkeit_unterschied_wohnzimmer).state > 1) {
        it.printf(3*hq, vs * 2, id(helvetica_18), id(my_red), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied_wohnzimmer).state);
      } else {
        it.printf(3*hq, vs * 2, id(helvetica_18), id(my_green), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied_wohnzimmer).state);
      }

      it.print(hq, vs * 3, id(helvetica_18), id(my_white), TextAlign::CENTER, "Schlafzimmer:");
      if (id(absolute_luftfeuchtigkeit_unterschied_sleepingroom).state > 1) {
        it.printf(3*hq, vs * 3, id(helvetica_18), id(my_red), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied_sleepingroom).state);
      } else {
        it.printf(3*hq, vs * 3, id(helvetica_18), id(my_green), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied_sleepingroom).state);
      }
      
      it.print(hq, vs * 4, id(helvetica_18), id(my_white), TextAlign::CENTER, "Kueche:");  
      if (id(absolute_luftfeuchtigkeit_unterschied_kitchen).state > 1) {
        it.printf(3*hq, vs * 4, id(helvetica_18), id(my_red), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied_kitchen).state);
      } else {
        it.printf(3*hq, vs * 4, id(helvetica_18), id(my_green), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied_kitchen).state);
      }
      
      it.print(hq, vs * 5, id(helvetica_18), id(my_white), TextAlign::CENTER, "Flur:");
      if (id(absolute_luftfeuchtigkeit_unterschied_floor).state > 1) {
        it.printf(3*hq, vs * 5, id(helvetica_18), id(my_red), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied_floor).state);
      } else {
        it.printf(3*hq, vs * 5, id(helvetica_18), id(my_green), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied_floor).state);
      }

      it.print(hq, vs * 6, id(helvetica_18), id(my_white), TextAlign::CENTER, "Badezimmer:");
      if (id(absolute_luftfeuchtigkeit_unterschied_badezimmer).state > 1) {
        it.printf(3*hq, vs * 6, id(helvetica_18), id(my_red), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied_badezimmer).state);
      } else {
        it.printf(3*hq, vs * 6, id(helvetica_18), id(my_green), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied_badezimmer).state);
      }

      it.print(hq, vs * 7, id(helvetica_18), id(my_white), TextAlign::CENTER, "Arbeitszimmer:");
      if (id(absolute_luftfeuchtigkeit_unterschied).state > 1) {
        it.printf(3*hq, vs * 7, id(helvetica_18), id(my_red), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied).state);
      } else {
        it.printf(3*hq, vs * 7, id(helvetica_18), id(my_green), TextAlign::CENTER, "%.2f g/m", id(absolute_luftfeuchtigkeit_unterschied).state);
      }

      

# Define pins for backlight display and back LED1
output:
  - platform: ledc
    pin: GPIO21
    id: former_led_pin
  - platform: ledc
    id: output_red
    pin: GPIO4
    inverted: true
  - platform: ledc
    id: output_green
    pin: GPIO16
    inverted: true
  - platform: ledc
    id: output_blue
    pin: GPIO17
    inverted: true

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: former_led_pin
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON
  - platform: rgb
    name: LED
    red: output_red
    id: led
    green: output_green
    blue: output_blue
    restore_mode: ALWAYS_OFF

# Exposed switches.
switch:
  - platform: restart
    name: ESP32-2432S028 Restart
